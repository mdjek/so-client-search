{"version":3,"sources":["app/history.js","publicUrl.js","app/actions.js","app/types.js","components/pageTemplates/NotFound.js","components/pageTemplates/MainPageTemplate.js","app/App.js","api/ApiClient.js","api/index.js","api/Questions.js","api/Base.js","lib/utils/locationExtensions.js","containers/Search/actions.js","containers/Search/types.js","containers/Main/container.js","containers/Main/reducer.js","lib/utils/stringExtensions.js","lib/utils/dateExtensions.js","components/lists/QuestionList.js","components/lists/QuestionListByTag.js","components/lists/QuestionListByAuthor.js","components/PanelInfo.js","containers/Search/container.js","containers/Search/reducer.js","containers/Question/actions.js","containers/Question/types.js","containers/Question/container.js","containers/Question/reducer.js","app/AppRoutes.js","app/AppRoot.js","app/reducer.js","app/reducers.js","index.js"],"names":["createBrowserHistory","basename","process","requestPending","dispatch","type","requestRejected","resetRequestStatus","NotFound","react_default","a","createElement","Link","to","MainPageTemplate","props","children","className","defaultProps","App","getPageTemplate","_this","pageTemplates_MainPageTemplate","this","Component","connect","actions","bindActionCreators","ApiClient","_ref$prefix","arguments","length","undefined","prefix","Object","classCallCheck","requestUrl","params","request","url","method","_ref2","body","config","headers","Accept","Content-Type","contentType","axios","concat","data","then","response","status","Error","api","questions","requestText","apiClient","get","tagName","authorId","questionId","BaseAPI","_ref","getQueryParams","name","window","location","href","updatedName","replace","results","RegExp","exec","goTo","AppHistory","push","getList","questionData","items","catch","getRequestText","getListByValue","typeList","properties","getState","prevPanelListParams","SearchReducer","panelListParams","getListByTag","panelQuestionData","id","getListByAuthor","resetPanel","reset","init","search","Main","state","changeHandler","event","setState","target","value","trim","searchHandler","preventDefault","action","onSubmit","placeholder","onChange","SearchActions","initialState","MainReducer","objectSpread","getNumberCase","num","oneName","twoName","fiveName","absNum","Math","abs","i","tsToDate","tsValue","Date","toLocaleDateString","QuestionList","_this$props","itemList","map","item","key","question_id","react_router_hash_link_lib","title","answer_count","onClick","owner","user_id","display_name","creation_date","tags","tag","defaulProps","QuestionListByTag","QuestionListByAuthor","disabled","PanelInfo","renderList","lists_QuestionListByTag","lists_QuestionListByAuthor","_this$props2","_this$props2$listBy","listBy","style","color","Search","pendingStatusRequest","errorStatusRequest","_this$props$actions","Fragment","role","decodeURI","lists_QuestionList","components_PanelInfo","AppReducer","pending","error","getQuestion","question","getAnswers","answers","Question","renderMarkup","content","dangerouslySetInnerHTML","__html","match","_this2","is_accepted","answer_id","QuestionReducer","AppRoutes","Router","history","Switch","Route","exact","path","component","AppRoot","app_App","connected_react_router_lib","app_AppRoutes","AppReducers","combineReducers","router","connectRouter","store","createStore","compose","applyMiddleware","thunk","routerMiddleware","render","es","app_AppRoot","document","getElementById"],"mappings":"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","file":"static/js/main.c4061f19.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\nimport publictUrl from '../publicUrl';\n\nexport default createBrowserHistory({ basename: publictUrl[process.env.NODE_ENV]  });\n","export default {\n  production: process.env.PUBLIC_URL,\n  development: '/',\n}\n","import * as appActionTypes from './types';\n\nexport const requestPending = () => dispatch => (\n    dispatch({\n        type: appActionTypes.REQUEST_PENDING\n    })\n);\n\nexport const requestRejected = () => dispatch => (\n    dispatch({\n        type: appActionTypes.REQUEST_REJECTED\n    })\n);\n\nexport const resetRequestStatus = () => dispatch => (\n    dispatch({\n        type: appActionTypes.REQUEST_RESET_STATUS\n    })\n);\n\n","export const REQUEST_PENDING = 'REQUEST_PENDING';\nexport const REQUEST_REJECTED = 'REQUEST_REJECTED';\nexport const REQUEST_RESET_STATUS = 'REQUEST_RESET_STATUS';","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst NotFound = () => (\n    <div>\n        <h1>404</h1>\n        <p>К&nbsp;сожалению такой страницы не&nbsp;существует. Вы&nbsp;можете перейти на&nbsp;главную страницу</p>\n        <Link to=\"/\">Перейти на главную</Link>\n    </div>\n);\n\nexport default NotFound;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst MainPageTemplate = (props) => {\n    const { children } = props;\n\n    return (\n        <div className=\"container-fluid\">\n            <div className=\"wrapper\">\n                <div className=\"main\">\n                    { children }\n                </div>\n            </div>\n        </div>\n    );\n};\n\nMainPageTemplate.propTypes = {\n    children: PropTypes.element,\n};\n\nMainPageTemplate.defaultProps = {\n    children: {},\n};\n\nexport default MainPageTemplate;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as actions from './actions';\nimport { MainPageTemplate } from '../components/pageTemplates/index';\n\nclass App extends Component {\n    getPageTemplate = () => {\n        const { children } = this.props;\n\n        return (\n            <MainPageTemplate {...this.props}>\n                {children}\n            </MainPageTemplate>\n        );\n    };\n\n    render() {\n        return this.getPageTemplate();\n    }\n}\n\nApp.propTypes = {\n    actions: PropTypes.shape({\n        init: PropTypes.func,\n    }),\n};\n\nconst mapStateToProps = () => ({\n\n});\n\nconst mapDispatchToProps = dispatch => ({\n    actions: bindActionCreators(actions, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import axios from 'axios';\n// import querystring from 'querystring';\n// import { isString } from 'Root/lib/utils/stringExtensions';\n\nclass ApiClient {\n    constructor({ prefix = 'https://api.stackexchange.com/2.2/' } = {}) {\n        this.prefix = prefix;\n    }\n\n    get(requestUrl, params = {}) {\n        return this.request({\n            url: requestUrl,\n            method: 'get',\n            params,\n        });\n    }\n\n    request({\n        url,\n        method,\n        body,\n        params = {},\n        contentType,\n    }) {\n        const config = {\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': contentType || 'application/json',\n            },\n        };\n\n        // const query = isString(params) ? params : querystring.stringify({ ...params });\n        // const query = params;\n        // const urlWithQuery = `${url}?${query}`;\n\n        return axios({\n            method,\n            // url: `${this.prefix}${urlWithQuery}`,\n            url: `${this.prefix}${url}`,\n            data: body,\n            headers: config.headers,\n        })\n            .then((response) => {\n                const { status, data } = response;\n\n                if (status >= 400) {\n                    throw new Error('Bad response from server');\n                }\n\n                return data;\n            });\n        /* .then((data) => {\n                if (typeof data === 'object' && data !== null) {\n                    const { code, message } = data;\n\n                    if (message) {\n                        return message;\n                    }\n\n                    throw new Error(code);\n                }\n\n                return data;\n            }); */\n    }\n}\n\nexport default ApiClient;\n","import ApiClient from './ApiClient';\nimport QuestionsAPI from './Questions';\n\nexport default {\n    questions: new QuestionsAPI({\n        apiClient: new ApiClient(),\n    }),\n};\n","import BaseAPI from './Base';\n\nclass QuestionsAPI extends BaseAPI {\n    getList(requestText) {\n        return this.apiClient.get(`search/advanced?order=desc&sort=activity&title=${requestText}&site=stackoverflow`);\n    }\n\n    getListByTag(tagName) {\n        return this.apiClient.get(`questions?order=desc&sort=activity&tagged=${tagName}&site=stackoverflow`);\n    }\n\n    getListByAuthor(authorId) {\n        return this.apiClient.get(`users/${authorId}/questions?order=desc&sort=activity&site=stackoverflow`);\n    }\n\n    getQuestion(questionId) {\n        return this.apiClient.get(`questions/${questionId}?order=desc&sort=activity&site=stackoverflow&filter=!9Z(-wwK0y`);\n    }\n\n    getAnswers(questionId) {\n        return this.apiClient.get(`questions/${questionId}/answers?order=desc&sort=activity&site=stackoverflow&filter=!9Z(-wzfpy`);\n    }\n}\n\nexport default QuestionsAPI;\n","class BaseAPI {\n    constructor({ apiClient }) {\n        if (!apiClient) {\n            throw new Error('[apiClient] is required');\n        }\n\n        this.apiClient = apiClient;\n    }\n}\n\nexport default BaseAPI;\n","/**\n * Получение значения по параметру в url\n * @param {string} name\n * @param {string} url\n * @returns {string}\n */\nconst getQueryParams = (name, url = window.location.href) => {\n    const updatedName = name.replace(/[\\[]/, '\\\\\\[').replace(/[\\]]/, '\\\\\\]'); // eslint-disable-line no-useless-escape\n    const regexS = '[\\\\?#/&]' + updatedName + '=([^&#]*)'; // eslint-disable-line prefer-template\n    const regex = new RegExp(regexS);\n    const results = regex.exec(url);\n\n    return results === null ? null : results[1];\n};\n\nexport default getQueryParams;","import api from '../../api/index';\nimport AppHistory from '../../app/history';\nimport * as actionTypes from './types';\nimport { requestPending, requestRejected, resetRequestStatus } from '../../app/actions';\nimport getQueryParams from '../../lib/utils/locationExtensions';\n\nexport const goTo = (requestText) => () => {\n    AppHistory.push(`/search/?text=${requestText}`);\n};\n\nexport const getList = requestText => dispatch => {\n    dispatch(requestPending());\n\n    return api.questions.getList(requestText)\n        .then((data) => {\n            dispatch({\n                type: actionTypes.QUESTIONS_GET_FULFILLED,\n                questionData: data.items,\n            });\n\n            dispatch(resetRequestStatus());\n        })\n        .catch(() => {\n            dispatch(requestRejected());\n        })\n};\n\nexport const getRequestText = (requestText) => dispatch => {\n    dispatch({\n        type: actionTypes.QUESTIONS_GET_REQUEST_TEXT,\n        requestText,\n    });\n};\n\nexport const getListByValue = (typeList, properties) => (dispatch, getState) => {\n    const prevPanelListParams = getState().SearchReducer.panelListParams;\n\n    dispatch(requestPending());\n\n    if (prevPanelListParams.typeList !== typeList\n            || prevPanelListParams.properties.name !== properties.name) {\n\n        switch (typeList) {\n            case 'byTag': {\n                const { name } = properties;\n\n                return (api.questions.getListByTag(name)\n                    .then((data) => {\n                        dispatch({\n                            type: actionTypes.QUESTIONS_PANEL_QUESTIONS_GET_FULFILLED,\n                            panelQuestionData: data.items,\n                            panelListParams: {typeList, properties}\n                        });\n\n                        dispatch(resetRequestStatus());\n                    })\n                    .catch(() => {\n                        dispatch(requestRejected());\n                    })\n                )\n            }\n\n            case 'byAuthor': {\n                const { id } = properties;\n\n                return (api.questions.getListByAuthor(id)\n                    .then((data) => {\n                        dispatch({\n                            type: actionTypes.QUESTIONS_PANEL_QUESTIONS_GET_FULFILLED,\n                            panelQuestionData: data.items,\n                            panelListParams: {typeList, properties},\n                        });\n\n                        dispatch(resetRequestStatus());\n                    })\n                    .catch(() => {\n                        dispatch(requestRejected());\n                    })\n                )\n            }\n\n            default: return;\n        }\n    }\n};\n\nexport const resetPanel = () => dispatch => (\n    dispatch({\n        type: actionTypes.QUESTIONS_PANEL_RESET,\n    })\n);\n\nexport const reset = () => dispatch => {\n    dispatch({\n        type: actionTypes.QUESTIONS_RESET,\n    });\n\n    dispatch(resetRequestStatus());\n};\n\nexport const init = () => dispatch => {\n    const { location: { search } } = AppHistory;\n    const requestText = getQueryParams('text', search);\n\n    if (requestText) {\n        dispatch(getRequestText(requestText));\n        dispatch(getList(requestText));\n    }\n};\n","export const QUESTIONS_GET_FULFILLED = 'QUESTIONS_GET_FULFILLED';\nexport const QUESTIONS_PANEL_QUESTIONS_GET_FULFILLED = 'QUESTIONS_PANEL_QUESTIONS_GET_FULFILLED';\n\nexport const QUESTIONS_GET_REQUEST_TEXT = 'QUESTIONS_GET_REQUEST_TEXT';\n\nexport const QUESTIONS_PANEL_RESET = 'QUESTIONS_PANEL_RESET';\nexport const QUESTIONS_RESET = 'QUESTIONS_RESET';","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport * as SearchActions from '../Search/actions';\n\nclass Main extends Component {\n    state = {\n        requestText: '',\n    };\n\n    changeHandler = (event) => {\n        this.setState({\n            requestText: event.target.value.trim(),\n        });\n    };\n\n    searchHandler = (event) => {\n        const { actions: { goTo }} = this.props;\n        const { requestText } = this.state;\n\n        event.preventDefault();\n\n        if (requestText) {\n            goTo(requestText);\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"row\">\n                <div className=\"col-xs-offset-3 col-xs-6\">\n                    <div className=\"search-block\">\n                        <form\n                            action=\"#\"\n                            method=\"get\"\n                            onSubmit={this.searchHandler}\n                        >\n                            <div className=\"form-group row\">\n                                <div className=\"col-xs-9\">\n                                    <input\n                                        type=\"text\"\n                                        name=\"search\"\n                                        className=\"form-control\"\n                                        placeholder=\"Ваш запрос\"\n                                        onChange={this.changeHandler}\n                                    />\n                                </div>\n\n                                <div className=\"col-xs-3\">\n                                    <button\n                                        className=\"btn btn-primary form-control\"\n                                    >\n                                        {'Искать'}\n                                    </button>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nMain.propTypes = {\n    goTo: PropTypes.func,\n};\n\nconst mapStateToProps = () => ({});\n\nconst mapDispatchToProps = dispatch => ({\n    actions: bindActionCreators(SearchActions, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);\n","// import * as actionTypes from './types';\n\nconst initialState = {};\n\nconst MainReducer = (state = { ...initialState }, action) => {\n    return state;\n};\n\nexport default MainReducer;\n","/**\n * Функция для склонения существительного в зависимости от количества элементов\n * @param {number} num Число\n * @param {string} oneName Название одного элемента (1 \"ответ\")\n * @param {string} twoName Название двух элементов (2 \"ответа\")\n * @param {string} fiveName Название пяти элементов (5 \"ответов\")\n * @returns {string}\n */\nexport const getNumberCase = (num, oneName, twoName, fiveName) => {\n    const absNum = Math.abs(num);\n    const i = (absNum % 100 > 20) ? absNum % 10 : absNum % 20;\n\n    // Если не целое число\n    if (i % 1 !== 0) {\n        return twoName;\n    }\n\n    switch (i) {\n        case 1:\n            return oneName;\n\n        case 2:\n        case 3:\n        case 4:\n            return twoName;\n\n        default:\n            return fiveName;\n    }\n};\n","export const tsToDate = (tsValue) => {\n    const ts = new Date(tsValue*1000);\n\n    return ts.toLocaleDateString();\n};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n// import { Link } from 'react-router-dom';\nimport { HashLink as Link } from 'react-router-hash-link';\nimport { getNumberCase } from '../../lib/utils/stringExtensions';\nimport { tsToDate } from '../../lib/utils/dateExtensions';\n\nclass QuestionList extends Component {\n    render () {\n        const { itemList, getListByValue, requestText } = this.props;\n        return (\n            <ul className=\"question-list\">\n                {itemList.map(item => (\n                    <li className=\"question-item\" key={item.question_id}>\n                        <p className=\"question-item__title\">\n                            <Link to={`/question/${item.question_id}${requestText && `/?refer=${requestText}`}`}>\n                                {item.title}\n                            </Link>\n                        </p>\n                        <p className=\"question-item__ans\">\n                            {item.answer_count\n                                ? (\n                                    <Link\n                                        to={`/question/${item.question_id}${requestText && `/?refer=${requestText}`}#answers`}\n                                        type=\"button\"\n                                        className=\"btn btn-info btn-sm\"\n                                    >\n                                        {item.answer_count} {getNumberCase(item.answer_count, 'ответ', 'ответа', 'ответов')}\n                                    </Link>)\n                                :\n                                (<span>Ответов нет</span>)\n                            }\n                        </p>\n                        <p\n                            className=\"question-item__author\"\n                        >\n                            {'Автор: '}\n                            <span\n                                onClick={() => {\n                                    getListByValue('byAuthor', {\n                                        id: item.owner.user_id,\n                                        name: item.owner.display_name,\n                                    })\n                                }}\n                            >\n                                {item.owner.display_name}\n                            </span>\n                        </p>\n                        <p className=\"question-item__date\">Добавлен: {tsToDate(item.creation_date)}</p>\n                        <ul className=\"tags\">\n                            {item.tags.map((tag) => (\n                                <li\n                                    key={`${item.question_id}${tag}`}\n                                >\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-default btn-xs\"\n                                        onClick={() => {getListByValue('byTag', {\n                                                name: tag,\n                                            })\n                                        }}\n                                    >\n                                        {tag}\n                                    </button>\n                                </li>\n                            ))}\n                        </ul>\n                    </li>\n                ))}\n            </ul>\n        );\n    }\n}\n\nQuestionList.propTypes = {\n    itemList: PropTypes.arrayOf(\n        PropTypes.shape(),\n    ),\n    getListByValue: PropTypes.func,\n    requestText: PropTypes.string,\n};\n\nQuestionList.defaulProps = {\n    itemList: [],\n};\n\nexport default QuestionList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n// import { Link } from 'react-router-dom';\nimport { HashLink as Link } from 'react-router-hash-link';\nimport { getNumberCase } from '../../lib/utils/stringExtensions';\nimport { tsToDate } from '../../lib/utils/dateExtensions';\n\nconst QuestionListByTag = (props) => {\n    return (\n        <ul className=\"question-list\">\n            {props.itemList.map(item => (\n                <li className=\"question-item\" key={item.question_id}>\n                    <p className=\"question-item__title\">\n                        <Link\n                                to={`/question/${item.question_id}${props.requestText && `/?refer=${props.requestText}`}`}\n                            >\n                            {item.title}\n                        </Link>\n                    </p>\n                    <p className=\"question-item__ans\">\n                        {item.answer_count\n                            ?\n                            (<Link\n                                to={`/question/${item.question_id}${props.requestText && `/?refer=${props.requestText}`}#answers`}\n                            >\n                                {item.answer_count} {getNumberCase(item.answer_count, 'ответ', 'ответа', 'ответов')}\n                            </Link>)\n                            :\n                            (<span>Ответов нет</span>)\n                        }\n                    </p>\n                    <p\n                        className=\"question-item__author cursor-default\"\n                    >\n                        {'Автор: '}\n                        <span>{item.owner.display_name}</span>\n                    </p>\n                    <p className=\"question-item__date\">Добавлен: {tsToDate(item.creation_date)}</p>\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nQuestionListByTag.propTypes = {\n    itemList: PropTypes.arrayOf(\n        PropTypes.shape(),\n    ),\n    requestText: PropTypes.string,\n};\n\nQuestionListByTag.defaulProps = {\n    itemList: [],\n};\n\nexport default QuestionListByTag;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n// import { Link } from 'react-router-dom';\nimport { HashLink as Link } from 'react-router-hash-link';\nimport { getNumberCase } from '../../lib/utils/stringExtensions';\nimport { tsToDate } from '../../lib/utils/dateExtensions';\n\nconst QuestionListByAuthor = (props) => {\n    return (\n        <ul className=\"question-list\">\n            {props.itemList.map(item => (\n                <li className=\"question-item\" key={item.question_id}>\n                    <p className=\"question-item__title\">\n                        <Link\n                            to={`/question/${item.question_id}${props.requestText && `/?refer=${props.requestText}`}`}\n                        >\n                            {item.title}\n                        </Link>\n                    </p>\n                    <p className=\"question-item__ans\">\n                        {item.answer_count\n                            ?\n                            (<Link\n                                to={`/question/${item.question_id}${props.requestText && `/?refer=${props.requestText}`}#answers`}\n                            >\n                                {item.answer_count} {getNumberCase(item.answer_count, 'ответ', 'ответа', 'ответов')}\n                            </Link>)\n                            :\n                            (<span>Ответов нет</span>)\n                        }\n                    </p>\n                    <p className=\"question-item__date\">Добавлен: {tsToDate(item.creation_date)}</p>\n                    <ul className=\"tags cursor-default\">\n                        {item.tags.map((tag) => (\n                            <li\n                                key={`${item.question_id}${tag}`}\n                            >\n                                <button\n                                    type=\"button\"\n                                    className=\"btn btn-default btn-xs\"\n                                    disabled\n                                >\n                                    {tag}\n                                </button>\n                            </li>\n                        ))}\n                    </ul>\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nQuestionListByAuthor.propTypes = {\n    itemList: PropTypes.arrayOf(\n        PropTypes.shape(),\n    ),\n    requestText: PropTypes.string,\n};\n\nQuestionListByAuthor.defaulProps = {\n    itemList: [],\n};\n\nexport default QuestionListByAuthor;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    QuestionListByTag,\n    QuestionListByAuthor,\n} from './lists/index'\n\nclass PanelInfo extends Component {\n    renderList = (typeList) => {\n        const { itemList, requestText } = this.props;\n\n        switch (typeList) {\n            case 'byTag': {\n                return <QuestionListByTag itemList={itemList} requestText={requestText} />\n            }\n\n            case 'byAuthor': {\n                return <QuestionListByAuthor itemList={itemList} requestText={requestText} />\n            }\n\n            default: return;\n        }\n    };\n\n    componentWillUnmount() {\n        const { resetPanel } = this.props;\n\n        resetPanel();\n    }\n\n    render() {\n        const {\n            listBy: {\n                typeList,\n                properties: {\n                    name,\n                }\n            },\n            resetPanel,\n            itemList,\n        } = this.props;\n\n        return (\n            <div className=\"panel-info\">\n                <span\n                    className=\"panel-info__close\"\n                    onClick={resetPanel}\n                />\n                {itemList && itemList.length > 0\n                    && (\n                        <h3>\n                            {typeList === 'byTag' && 'Похожие вопросы по тегу'}\n                            {typeList === 'byAuthor' && 'Другие вопросы автора'}\n                            {name\n                            && (<span style={{color: '#bbb'}}>{` \"${name}\"`}</span>)\n                            }\n                            {':'}\n                        </h3>\n                    )\n                }\n                {this.renderList(typeList)}\n            </div>\n        );\n    };\n}\n\nPanelInfo.propTypes = {\n    resetPanel: PropTypes.func,\n    id: PropTypes.number,\n    name: PropTypes.string,\n    typeList: PropTypes.string,\n    itemList: PropTypes.arrayOf(PropTypes.shape()),\n};\n\nPanelInfo.defaultProps = {\n    itemList: [],\n};\n\nexport default PanelInfo;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { QuestionList } from '../../components/lists/index';\nimport PanelInfo from '../../components/PanelInfo';\nimport * as actions from './actions';\n\nclass Search extends Component {\n    componentDidMount() {\n        const { actions: { init } } = this.props;\n\n        init();\n    }\n\n    componentWillUnmount() {\n        const { actions: { reset } } = this.props;\n\n        reset();\n    }\n\n    render() {\n        const {\n            questionData,\n            panelQuestionData,\n            panelListParams,\n            requestText,\n            pendingStatusRequest,\n            errorStatusRequest,\n\n            actions: {\n                getListByValue,\n                resetPanel,\n            }\n        } = this.props;\n\n        return (\n            <>\n                { pendingStatusRequest &&\n                    (\n                        <div className=\"spinner-block\">\n                            <div className=\"spinner\" />\n                        </div>\n                    )\n                }\n                <ul className=\"nav nav-pills\">\n                    <li role=\"presentation\">\n                        <Link to=\"/\">Новый поиск</Link>\n                    </li>\n                </ul>\n\n                {\n                    errorStatusRequest\n                        ? (<h3>Не удалось загрузить результаты :(</h3>)\n                        : (\n                            <>\n                                <div className=\"row\">\n                                    <div className=\"col-sm-12\">\n                                        {\n                                            questionData && questionData.length > 0\n                                                ? (<h2>\n                                                    {'Результаты '}\n                                                    {requestText\n                                                    && (<>\n                                                        {'по запросу '}\n                                                        <span style={{color: '#ccc'}}>\"{decodeURI(requestText)}\"</span>\n                                                        {':'}\n                                                    </>)\n                                                    }\n                                                </h2>)\n                                                : (\n                                                    <h3>{\n                                                        pendingStatusRequest\n                                                            ? 'Ищем ответы...'\n                                                            : 'Ничего не найдено по запросу :('\n                                                    }</h3>\n                                                )\n                                        }\n                                    </div>\n                                </div>\n                                <div className=\"row\">\n                                    <div className=\"col-sm-8\">\n                                        {questionData\n                                            && (\n                                                    <div>\n                                                        <QuestionList\n                                                            itemList={questionData}\n                                                            getListByValue={getListByValue}\n                                                            requestText={requestText}\n                                                        />\n                                                    </div>\n                                                )\n                                        }\n                                    </div>\n                                    <div className=\"col-sm-4\">\n                                        {\n                                            panelQuestionData && panelQuestionData.length > 0\n                                            && panelListParams && panelListParams.typeList\n                                            && (\n                                                <PanelInfo\n                                                    itemList={panelQuestionData}\n                                                    listBy={panelListParams}\n                                                    resetPanel={resetPanel}\n                                                    requestText={requestText}\n                                                />\n                                            )\n                                        }\n                                    </div>\n                                </div>\n                            </>\n                        )\n                }\n            </>\n        );\n    }\n}\n\nSearch.propTypes = {\n    actions: PropTypes.shape({\n        init: PropTypes.func,\n        reset: PropTypes.func,\n        getListByValue: PropTypes.func,\n        resetPanel: PropTypes.func,\n    }),\n    questionData: PropTypes.arrayOf(PropTypes.shape()),\n    panelQuestionData: PropTypes.arrayOf(PropTypes.shape()),\n    panelListParams: PropTypes.shape(),\n    requestText: PropTypes.string,\n    pendingStatusRequest: PropTypes.bool,\n    errorStatusRequest: PropTypes.bool,\n};\n\nconst mapStateToProps = state => ({\n    questionData: state.SearchReducer.questionData,\n    panelQuestionData: state.SearchReducer.panelQuestionData,\n    panelListParams: state.SearchReducer.panelListParams,\n    requestText: state.SearchReducer.requestText,\n    pendingStatusRequest: state.AppReducer.pending,\n    errorStatusRequest: state.AppReducer.error,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    actions: bindActionCreators(actions, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);\n","import * as actionTypes from './types';\n\nconst initialState = {\n    questionData: [],\n    panelQuestionData: [],\n    requestText: '',\n    panelListParams: { typeList: '', properties: { id: null, name: '' } },\n};\n\nconst SearchReducer = (state = { ...initialState }, action) => {\n    switch (action.type) {\n        case actionTypes.QUESTIONS_GET_FULFILLED: {\n            return {\n                ...state,\n                questionData: action.questionData,\n            };\n        }\n\n        case actionTypes.QUESTIONS_GET_REQUEST_TEXT: {\n            return {\n                ...state,\n                requestText: action.requestText,\n            }\n        }\n\n        case actionTypes.QUESTIONS_PANEL_QUESTIONS_GET_FULFILLED: {\n            return {\n                ...state,\n                panelQuestionData: action.panelQuestionData,\n                panelListParams: action.panelListParams,\n            };\n        }\n\n        case actionTypes.QUESTIONS_PANEL_RESET: {\n            return {\n                ...state,\n                panelQuestionData: [],\n                panelListParams: { typeList: '', properties: { id: null, name: '' } },\n            };\n        }\n\n        case actionTypes.QUESTIONS_RESET: {\n            return {\n                ...initialState,\n            };\n        }\n\n\n        default: return state;\n    }\n};\n\nexport default SearchReducer;\n","import api from '../../api/index';\nimport * as actionTypes from './types';\nimport { requestPending, requestRejected, resetRequestStatus } from '../../app/actions';\n\nexport const getQuestion = questionId => dispatch => {\n    dispatch(requestPending());\n\n    return api.questions.getQuestion(questionId)\n        .then((data) => {\n            dispatch({\n                type: actionTypes.QUESTIONS_GET_QUESTION_FULFILLED,\n                question: data.items && data.items.length > 0 ? data.items[0] : {},\n            });\n\n            dispatch(resetRequestStatus());\n        })\n        .catch(() => {\n            dispatch(requestRejected());\n        })\n};\n\nexport const getAnswers = questionId => dispatch => {\n    dispatch(requestPending());\n\n    return api.questions.getAnswers(questionId)\n        .then((data) => {\n            dispatch({\n                type: actionTypes.QUESTIONS_GET_ANSWERS_FULFILLED,\n                answers: data.items,\n            });\n\n            dispatch(resetRequestStatus());\n        })\n        .catch(() => {\n            dispatch(requestRejected());\n        })\n};\n\nexport const init = questionId => (dispatch) => {\n    if (questionId) {\n        dispatch(getQuestion(questionId));\n        dispatch(getAnswers(questionId));\n    }\n};\n\nexport const reset = () => (dispatch) => {\n    dispatch({\n        type: actionTypes.QUESTION_RESET,\n    });\n\n    dispatch(resetRequestStatus());\n};","export const QUESTIONS_GET_QUESTION_FULFILLED = 'QUESTIONS_GET_QUESTION_FULFILLED';\nexport const QUESTIONS_GET_ANSWERS_FULFILLED = 'QUESTIONS_GET_ANSWERS_FULFILLED';\nexport const QUESTION_RESET = 'QUESTION_RESET';","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as actions from './actions';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { tsToDate } from '../../lib/utils/dateExtensions';\nimport { Link } from 'react-router-dom';\nimport AppHistory from '../../app/history';\nimport getQueryParams from '../../lib/utils/locationExtensions';\n\nclass Question extends Component {\n    componentDidMount() {\n        const {\n            match: { params: { id } },\n            actions: { init }\n        } = this.props;\n\n        init(id);\n    }\n\n    componentWillUnmount() {\n        const {\n            actions: { reset }\n        } = this.props;\n\n        reset();\n    }\n\n    getRequestText = () => {\n        const { location: { search } } = AppHistory;\n        const requestText = getQueryParams('refer', search);\n\n        if (requestText) {\n            return requestText;\n        }\n    };\n\n    renderMarkup = (content) => {\n        return (\n            <div dangerouslySetInnerHTML={{\n                __html: content,\n            }} />\n        );\n    };\n\n    render() {\n        const {\n            question,\n            answers,\n            pendingStatusRequest,\n            errorStatusRequest\n        } = this.props;\n\n        return (\n            <>\n                { pendingStatusRequest &&\n                    (\n                        <div className=\"spinner-block\">\n                            <div className=\"spinner\" />\n                        </div>\n                    )\n                }\n\n                <ul className=\"nav nav-pills\">\n                    {\n                        this.getRequestText() && (\n                            <li role=\"presentation\">\n                                <Link to={`/search/?text=${this.getRequestText()}`}>← Вернуться к результатам</Link>\n                            </li>\n                        )\n                    }\n                    <li role=\"presentation\">\n                        <Link to=\"/\">Новый поиск</Link>\n                    </li>\n                </ul>\n\n                {\n                    errorStatusRequest\n                        ? (<h3>Не удалось загрузить результаты :(</h3>)\n                        : (\n                            <>\n                                {question && question.title\n                                    ? (\n                                        <div className=\"question-info\">\n                                            <h1>{question.title}</h1>\n                                            {this.renderMarkup(question.body)}\n                                            <div className=\"question-info__owner\">{`— ${question.owner.display_name}, ${tsToDate(question.creation_date)}`}</div>\n                                            <hr/>\n                                        </div>\n                                    )\n                                    : (\n                                        <h2>{\n                                            pendingStatusRequest\n                                                ? 'Загружаем данные вопроса...'\n                                                : 'Вопрос не найден :('\n                                        }</h2>\n                                    )\n                                }\n\n                                {question.answer_count > 0 ? (\n                                        <div id=\"answers\">\n                                            <h2>Ответы</h2>\n                                            <ul className=\"answer-list\">\n                                                {\n                                                    answers.map(item => (\n                                                            item.is_accepted === true &&\n                                                            (<li key={item.answer_id} className=\"accepted\">\n                                                                {this.renderMarkup(item.body)}\n                                                                <div className=\"answer-info\">\n                                                                    {`— ${item.owner.display_name}, ${tsToDate(item.creation_date)}`}\n                                                                </div>\n                                                            </li>)\n                                                        )\n                                                    )\n                                                }\n\n                                                {\n                                                    answers.map(item => (\n                                                            item.is_accepted !== true &&\n                                                            (<li key={item.answer_id}>\n                                                                {this.renderMarkup(item.body)}\n                                                                <div className=\"answer-info\">\n                                                                    {`— ${item.owner.display_name}, ${tsToDate(item.creation_date)}`}\n                                                                </div>\n                                                            </li>)\n                                                        )\n                                                    )\n                                                }\n\n                                            </ul>\n                                        </div>\n                                    )\n                                    : (<p>\n                                        {\n                                            pendingStatusRequest\n                                                ? 'Загружаем ответы...'\n                                                : 'На этот вопрос ещё никто не ответил :('\n                                        }\n                                        </p>\n                                    )\n                                }\n                            </>\n                        )\n                }\n            </>\n        );\n    }\n}\n\nQuestion.propTypes = {\n    action: PropTypes.shape({\n       init: PropTypes.func,\n       reset: PropTypes.func,\n    }),\n    question: PropTypes.shape(),\n    answers: PropTypes.arrayOf(\n        PropTypes.shape(),\n    ),\n    pendingStatusRequest: PropTypes.bool,\n    errorStatusRequest: PropTypes.bool,\n};\n\nQuestion.defaultProps = {\n    question: {},\n    answers: [],\n};\n\nconst mapStateToProps = state => ({\n    question: state.QuestionReducer.question,\n    answers: state.QuestionReducer.answers,\n    pendingStatusRequest: state.AppReducer.pending,\n    errorStatusRequest: state.AppReducer.error,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    actions: bindActionCreators(actions, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Question);\n","import * as actionTypes from './types';\n\nconst initialState = {\n    question: {},\n    answers : [],\n};\n\nconst QuestionReducer = (state = { ...initialState }, action) => {\n    switch (action.type) {\n        case actionTypes.QUESTIONS_GET_QUESTION_FULFILLED: {\n            return {\n                ...state,\n                question: action.question,\n            };\n        }\n\n        case actionTypes.QUESTIONS_GET_ANSWERS_FULFILLED: {\n            return {\n                ...state,\n                answers: action.answers,\n            };\n        }\n\n        case actionTypes.QUESTION_RESET: {\n            return {\n                ...initialState,\n            };\n        }\n\n        default: return state;\n    }\n\n};\n\nexport default QuestionReducer;\n","import React from 'react';\nimport { Route, Router, Switch } from 'react-router-dom';\nimport { Main } from '../containers/Main/index';\nimport { Search } from '../containers/Search/index';\nimport { Question } from '../containers/Question/index';\nimport { NotFound } from '../components/pageTemplates/index';\nimport AppHistory from '../app/history';\n\nconst AppRoutes = () => (\n  <Router history={AppHistory}>\n    <Switch>\n      <Route exact path=\"/\" component={Main} />\n      <Route exact path=\"/search\" component={Search} />\n      <Route exact path=\"/question/:id\" component={Question} />\n      <Route component={NotFound} />\n    </Switch>\n  </Router>\n);\n\n\nexport default AppRoutes;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ConnectedRouter } from 'connected-react-router';\nimport App from './App';\nimport AppRoutes from './AppRoutes';\n\nconst AppRoot = ({ history }) => (\n    <App>\n        <ConnectedRouter history={history}>\n            <AppRoutes />\n        </ConnectedRouter>\n    </App>\n);\n\nAppRoot.propTypes = {\n    history: PropTypes.shape().isRequired,\n};\n\nexport default AppRoot;\n","import * as appActionTypes from './types';\n\nconst initialState = {\n    pending: false,\n    error: false,\n};\n\nconst AppReducer = (state = { ...initialState }, action) => {\n    switch(action.type) {\n        case appActionTypes.REQUEST_PENDING: {\n            return {\n                pending: true,\n                error: false,\n            }\n        }\n\n        case appActionTypes.REQUEST_REJECTED: {\n            return {\n                pending: false,\n                error: true,\n            }\n        }\n\n        case appActionTypes.REQUEST_RESET_STATUS: {\n            return initialState;\n        }\n\n        default: return state;\n    }\n\n};\n\nexport default AppReducer;\n","// import AppHistory from '../app/history';\nimport { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\nimport AppReducer from '../app/reducer';\nimport { MainReducer } from '../containers/Main/index';\nimport { SearchReducer } from '../containers/Search/index';\nimport { QuestionReducer } from '../containers/Question/index';\n\nconst AppReducers = (history) => (\n    combineReducers({\n        router: connectRouter(history),\n        AppReducer,\n        MainReducer,\n        SearchReducer,\n        QuestionReducer,\n    })\n);\n\nexport default AppReducers;\n","// ie\nimport \"@babel/polyfill\";\n// eslint-disable-next-line\nimport Promise from 'promise-polyfill';\n\nimport React from 'react';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { routerMiddleware } from 'connected-react-router';\nimport thunk from 'redux-thunk';\nimport AppHistory from './app/history';\nimport AppRoot from './app/AppRoot';\nimport AppReducers from './app/reducers'\nimport './combineCss';\n\nconst createReducers = history => AppReducers(history);\n\nconst store = createStore(\n    createReducers(AppHistory),\n    compose(\n        applyMiddleware(\n            thunk,\n            routerMiddleware(AppHistory),\n        ),\n    ),\n);\n\nrender(\n    <Provider store={store}>\n        <AppRoot history={AppHistory} />\n    </Provider>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}